plugins {
    id 'idea'
    id 'maven-publish'
    id 'com.modrinth.minotaur'
    id 'io.github.CDAGaming.cursegradle'
    id 'net.minecraftforge.gradle' version '[6.0,6.2]'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
    archivesName = "${mod_id}-forge"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

//    config "${mod_id}.mixins.json"
//    config "${mod_id}.forge.mixins.json"
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly project(':common')
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(':common').sourceSets.main.allJava)
}
tasks.named('sourcesJar', Jar) {
    from(project(':common').sourceSets.main.allSource)
}

processResources {
    from project(':common').sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        if (System.getenv("DIONTRYBAN_MAVEN_TOKEN") != null) {
            maven {
                url = 'https://maven.diontryban.com/releases'
                credentials {
                    username = 'trikzon'
                    password = System.getenv("DIONTRYBAN_MAVEN_TOKEN")
                }
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionNumber = "${project.version}-forge"
    versionName = "[Forge ${project.minecraft_version}] v${project.mod_version}"
    versionType = project.version_type
    changelog = rootProject.file('MINI_CHANGELOG.md').text
    uploadFile = jar
    gameVersions = project.game_versions.split(',').toList()
    loaders = ['forge']
    dependencies {
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_TOKEN')
    project {
        id = project.curseforge_id
        releaseType = project.version_type
        changelog = rootProject.file('MINI_CHANGELOG.md').text
        changelogType = 'markdown'
        mainArtifact(jar) {
            it.displayName = "[Forge ${project.minecraft_version}] v${project.mod_version}"
        }
        addGameVersion 'Forge'
        if (project.is_client.toBoolean()) { addGameVersion 'Client' }
        if (project.is_server.toBoolean()) { addGameVersion 'Server' }
        addGameVersion project.java_version
        project.game_versions.split(',').each { addGameVersion it }
    }
}
